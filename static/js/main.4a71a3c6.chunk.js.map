{"version":3,"sources":["media/91.svg","media/background.jpg","serviceWorker.js","reducers/index.js","reducers/restaurantsReducer.js","reducers/locationReducer.js","reducers/cardReducer.js","reducers/loadingReducer.js","actions/index.js","containers/Form/Form.js","containers/Card/Card.js","containers/Header/Header.js","fetchAll.js","containers/CardContainer/CardContainer.js","containers/Info/Info.js","containers/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","rootReducer","combineReducers","restaurants","state","arguments","length","undefined","action","type","map","restaurant","name","id","shortid","generate","card","loading","boolean","setRestaurants","isLoading","Form","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleEnter","event","key","value","getLocation","handleChange","target","setState","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","props","Geocode","setApiKey","process","fromAddress","sent","gatherLocationInfo","results","t0","console","log","message","stop","result","formatted_address","coords","geometry","setLocation","redirect","handleClick","navigator","geolocation","getCurrentPosition","position","getAddress","_ref2","_callee2","_context2","fromLatLng","latitude","longitude","abrupt","_x","apply","inherits","createClass","document","addEventListener","removeEventListener","react_default","createElement","react_router","to","className","htmlFor","onChange","placeholder","react_router_dom","onClick","Component","connect","dispatch","Card","_getPrototypeOf2","_len","args","Array","_key","concat","buildTitle","toLowerCase","split","word","charAt","toUpperCase","slice","join","buildAddress","address","addressArray","bigCity","reverse","splice","buildDistance","distance","splitDistance","toString","decimal","setCard","_this$props","_this$props$correctPl","correctPlaces","inspectionscore","violationtype","headerText","addressText","distanceText","fetchAll","_ref","url","data","fetch","json","ok","Error","CardContainer","fetchRestaurants","gatherRestaurantData","restaurantData","filter","dataPiece","facilityname","_correctPlaces$","location_address","city","zip","coordinates","findDistances","sortByDistance","sort","b","cards","start","lat","lng","addedDistances","end","miles","haversine","unit","objectSpread","containers_Header_Header","alt","src","loader","containers_Card_Card","assign","Info","date","inspectiontype","violation","inspectiondate","buildDate","App","gatherRestaurantNames","facilities","facility","flatFacilities","toConsumableArray","Set","_fetchRestaurants","_this2","backgroundStyle","backgroundImage","background","style","exact","path","component","render","Info_Info","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","ReactDOM","es","containers_App_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a71a3c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/91.dcbd441c.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.a9a75cdd.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { restaurantsReducer } from './restaurantsReducer';\nimport { locationReducer } from './locationReducer';\nimport { cardReducer } from './cardReducer';\nimport { loadingReducer } from './loadingReducer';\n\nexport const rootReducer = combineReducers({\n  restaurants: restaurantsReducer,\n  location: locationReducer,\n  card: cardReducer,\n  loading: loadingReducer\n})","import shortid from 'shortid';\n\nexport const restaurantsReducer = (state = [], action) => {\n  switch(action.type) {\n\n    case('SET_RESTAURANTS') :\n      return action.restaurants.map(restaurant => {\n        return { name: restaurant, id: shortid.generate() }\n      });\n\n    default :\n      return state;\n  }\n}","export const locationReducer = (state = {}, action) => {\n  switch(action.type) {\n\n    case('SET_LOCATION') :\n      return action.location;\n\n    default :\n      return state;\n  }\n}","export const cardReducer = (state = {}, action) => {\n  switch(action.type) {\n\n    case('SET_CARD') :\n      return action.card;\n\n    default :\n      return state;\n  }\n}","export const loadingReducer = (state = false, action) => {\n  switch(action.type) {\n\n    case('IS_LOADING') :\n      return action.boolean;\n\n    default :\n      return state;\n  }\n}","export const setRestaurants = (restaurants) => ({\n  type: 'SET_RESTAURANTS',\n  restaurants\n})\n\nexport const setLocation = (location) => ({\n  type: 'SET_LOCATION',\n  location\n})\n\nexport const isLoading = (boolean) => ({\n  type: 'IS_LOADING',\n  boolean\n})\n\nexport const setCard = (card) =>({\n  type: 'SET_CARD',\n  card\n})","import React, { Component } from 'react';\nimport Geocode from \"react-geocode\";\nimport { connect } from 'react-redux';\nimport { NavLink, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { setRestaurants, setLocation, isLoading } from '../../actions';\n\nexport class Form extends Component {\n  constructor() {\n    super();\n    this.state = { \n      value: '', \n      redirect: false \n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleEnter); \n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleEnter);\n  }\n\n  handleEnter = (event) => {\n    if (event.key !== 'Enter') return null;\n    this.state.value && this.getLocation()\n  }\n\n  handleChange = (event) => {\n    const { value } = event.target;\n    this.setState({value});\n  }\n\n  getLocation = async () => {\n    this.props.isLoading(true);\n    Geocode.setApiKey(process.env.REACT_APP_GEOCODE_KEY);\n    const { value } = this.state;\n    try {\n      const response = await Geocode.fromAddress(value);\n      this.gatherLocationInfo(response.results[0])\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  gatherLocationInfo = (result) => {\n    let location = {\n      name: result.formatted_address,\n      coords: result.geometry.location\n    };\n    this.props.setLocation(location);\n    this.setState({redirect: true});\n  }\n\n  handleClick = () => {\n    if (navigator.geolocation) {\n      this.props.isLoading(true);\n      navigator.geolocation.getCurrentPosition(position => {\n        this.getAddress(position.coords);\n      })\n    } else {\n      return 'geolocation is not enabled/supported in this browser';\n    }\n  }\n\n  getAddress = async (position) => {\n    Geocode.setApiKey(process.env.REACT_APP_GEOCODE_KEY);\n    try {\n      const response = await Geocode.fromLatLng(position.latitude, position.longitude);\n      this.gatherLocationInfo(response.results[0]);\n      return response.results[0];\n    } catch (error) {\n      return error.message;\n    }\n  }\n\n  render() {\n    const { value } = this.state;\n    return this.state.redirect\n      ? <Redirect to=\"/Rotten-Potatoes/locations\" />\n      : (\n      <div className=\"Form\">\n        <h1>Rotten Potatoes</h1>\n        <label htmlFor=\"address\">Enter an address:</label>\n        <input  value={value} \n                onChange={this.handleChange} \n                id=\"address\" \n                type=\"text\" \n                placeholder='ex. 123 Fake Address, Denver, CO'>\n        </input>\n        <h3>OR</h3>\n        <NavLink to=\"/Rotten-Potatoes/locations\" onClick={this.handleClick}>Find My Location</NavLink>\n      </div>\n    )\n  }\n}\n\nexport const mapStateToProps = (state) => ({\n  loading: state.loading\n});\n\nexport const mapDispatchToProps = (dispatch) => ({\n  setRestaurants: (restaurants) => dispatch(setRestaurants(restaurants)),\n  setLocation: (location) => dispatch(setLocation(location)),\n  isLoading: (boolean) => dispatch(isLoading(boolean)),\n});\n\nForm.propTypes = {\n  loading: PropTypes.bool,\n  setRestaurants: PropTypes.func,\n  setLocation: PropTypes.func,\n  isLoading: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { setCard } from '../../actions';\n\nexport class Card extends Component {\n\n  buildTitle = (name) => {\n    let nameArray = name.toLowerCase().split(' ');\n\n    return nameArray.map(word => {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    }).join(' ');\n  }\n\n  buildAddress = (address) => {\n    let addressArray = address.toLowerCase().split(' ');\n\n    addressArray = addressArray.map(word => {\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    }).reverse();\n\n    const bigCity = addressArray[1].toUpperCase();\n    addressArray.splice(1, 1, bigCity);\n\n    return addressArray.reverse().join(' ');\n  }\n\n  buildDistance = (distance) => {\n    let splitDistance = distance.toString().split('.');\n    let decimal = splitDistance[1].slice(0, 1);\n\n    return splitDistance[0] + '.' + decimal + 'm away';\n  }\n\n  handleClick = () => {\n    this.props.setCard(this.props);\n  }\n\n  render() {\n    const { name, address, distance, id } = this.props;\n    const { inspectionscore, violationtype } = this.props.correctPlaces[0];\n\n    let headerText = this.buildTitle(name);\n    let addressText = this.buildAddress(address);\n    let distanceText = this.buildDistance(distance);\n\n    return (\n      <div className=\"Card\">\n        <div className=\"card-text\">\n          <Link to={`/locations/${id}`} onClick={this.handleClick}>{headerText}</Link>\n          <p>{addressText}</p>\n          <p>{distanceText}</p>\n        </div>\n        <div className=\"card-percentage\">\n          <p>inspection score:</p>\n          <p>{ inspectionscore + '%' }</p>\n          <p>{ violationtype }</p>\n        </div>\n        <div className=\"card-favorite\">\n          +\n        </div>\n      </div>\n    )\n  }\n}\n\nexport const mapDispatchToProps = (dispatch) => ({\n  setCard: (card) => dispatch(setCard(card))\n})\n\nCard.propTypes = {\n  setCard: PropTypes.func\n}\n\nexport default connect(null, mapDispatchToProps)(Card);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const Header = (props) => {\n\n  return (\n    <div className=\"Header\">\n      <div className=\"title\">\n        <h1>Rotten Potatoes</h1>\n      </div>\n      <div className=\"nav\">\n        <p>Showing Results for:</p>\n        <p>{ props.location && props.location.name }</p>\n        <NavLink to=\"/Rotten-Potatoes\">change location..</NavLink>\n      </div>\n    </div>\n  )\n}\n\nexport const mapStateToProps = (state) => ({\n  location: state.location\n})\n\nHeader.propTypes = {\n  location: PropTypes.object\n}\n\nexport default connect(mapStateToProps, null)(Header);","export const fetchAll = async (url) => {\n  const response = await fetch(url)\n  const data = await response.json();\n  if(!response.ok){\n    throw new Error(data)\n  } else {\n    return data;\n  }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport haversine from 'haversine';\nimport PropTypes from 'prop-types';\n\nimport Card from '../Card/Card';\nimport Header from '../Header/Header';\nimport { isLoading } from '../../actions';\nimport { fetchAll } from '../../fetchAll';\nimport loader from '../../media/91.svg';\n\nexport class CardContainer extends Component {\n  constructor() {\n    super();\n    this.state = { cards: [] };\n  }\n\n  fetchRestaurants = async () => {\n    const url = 'https://data.colorado.gov/resource/d5e8-gubm.json';\n    const data = await fetchAll(url);\n    this.gatherRestaurantData(data);\n  }\n\n  gatherRestaurantData = (data) => {\n    const restaurantData = this.props.restaurants.map(restaurant => {\n      const correctPlaces = data.filter(dataPiece => dataPiece.facilityname === restaurant.name)\n      const { location_address, city, state, zip, location } = correctPlaces[0];\n      return { \n        name: restaurant.name, \n        id: restaurant.id,\n        address: `${location_address}. ${city}, ${state}, ${zip}`,\n        coordinates: location && location.coordinates,\n        correctPlaces \n      };\n    });\n    this.findDistances(restaurantData);\n  }\n\n  findDistances(restaurants) {\n    const { location } = this.props;\n    let start = { \n      latitude: location.coords.lat, \n      longitude: location.coords.lng \n    };\n    const addedDistances = restaurants.map(restaurant => {\n      if (!restaurant.coordinates) return null;\n      let end = { latitude: restaurant.coordinates[1], longitude: restaurant.coordinates[0]};\n      let miles =  haversine(start, end, {unit: 'mile'});\n      return {...restaurant, distance: miles };\n    })\n    this.sortByDistance(addedDistances);\n  }\n  \n  sortByDistance = (restaurants) => {\n    restaurants.sort(function(a, b) {\n      if (!a || !b) return null;\n      return a.distance - b.distance;\n    });\n    restaurants = restaurants.filter(restaurant => restaurant !== null);\n    this.setState({cards: restaurants});\n    this.props.isLoading(false);\n  }\n\n  render() {\n    const { loading, location, restaurants } = this.props;\n    const { cards } = this.state;\n    if (location.coords && !cards.length) this.fetchRestaurants(restaurants);\n\n    return loading\n\n      ? (\n        <div className=\"CardContainer\">\n          <Header />\n          <img alt='loader gif' src={loader} className=\"loader\"></img>\n        </div>\n      )\n\n      : (\n        <div className=\"CardContainer\">\n          <Header />\n          <div className=\"card-grid\">\n            { cards.map((card) => <Card key={card.id} {...card} />) }\n          </div>\n        </div>\n      )\n\n  }\n}\n\nexport const mapStateToProps = (state) => ({\n  location: state.location,\n  restaurants: state.restaurants,\n  loading: state.loading\n});\n\nexport const mapDispatchToProps = (dispatch) => ({\n  isLoading: (boolean) => dispatch(isLoading(boolean))\n})\n\nCardContainer.propTypes = {\n  location: PropTypes.object,\n  restaurants: PropTypes.array,\n  loading: PropTypes.bool,\n  isLoading: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardContainer);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Info extends Component {\n\n  buildDate(date) {\n    return date.split('T')[0];\n  }\n\n  buildDistance = (distance) => {\n    let splitDistance = distance.toString().split('.');\n    let decimal = splitDistance[1].slice(0, 1);\n\n    return splitDistance[0] + '.' + decimal + 'm away';\n  }\n\n  render() {\n    const { name, address, correctPlaces, distance } = this.props;\n    const { inspectiontype, violation, violationtype, inspectionscore, inspectiondate } = correctPlaces[0];\n\n    let date = this.buildDate(inspectiondate);\n    let distanceText = this.buildDistance(distance);\n    return(\n      <div className=\"Info\">\n        <h1>{name}</h1>\n        <p>{distanceText}</p>\n        <p>{address}</p>\n        <div className=\"inspection-info\">\n          <h3>Latest Inspection:</h3>\n          <p>Date: {date}</p>\n          <p>Inspection Type: {inspectiontype}</p>\n          <p>Inspection Violation: {violation}</p>\n          <p>Violation Status: {violationtype}</p>\n          <p>Inspection Score: {inspectionscore}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nInfo.propTypes = {\n  name: PropTypes.string,\n  address: PropTypes.string,\n  correctPlaces: PropTypes.array,\n  distance: PropTypes.number\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { setRestaurants } from '../../actions';\nimport Form from '../Form/Form';\nimport CardContainer from '../CardContainer/CardContainer';\nimport { Info } from '../Info/Info';\nimport background from '../../media/background.jpg';\nimport { fetchAll } from '../../fetchAll';\n\nexport class App extends Component {\n\n  componentDidMount() {\n    this.fetchRestaurants();\n  }\n\n  async fetchRestaurants() {\n    const url = 'https://data.colorado.gov/resource/d5e8-gubm.json';\n    let data = await fetchAll(url);\n    this.gatherRestaurantNames(data);\n  }\n\n  gatherRestaurantNames = (data) => {\n    const facilities = data.map(facility =>  facility.facilityname)\n    const flatFacilities = [...new Set(facilities)];\n    this.props.setRestaurants(flatFacilities);\n  }\n\n  render() {\n    const backgroundStyle = { backgroundImage: 'url(' + background + ')' };\n    return (\n      <div className=\"App\">\n        <div style={backgroundStyle} className=\"background-image\"></div>\n        <div className=\"app-frame\"></div>\n        <div className=\"App-content\">\n          <Route exact path=\"/Rotten-Potatoes\" component={Form} />\n          <Route exact path=\"/Rotten-Potatoes/locations\" component={CardContainer} />\n          <Route path='/locations/:id' render={({ match }) => {\n            return <Info {...this.props.card} /> }} \n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = (state) => ({\n  card: state.card\n})\n\nexport const mapDispatchToProps = (dispatch) => ({\n  setRestaurants: (restaurants) => dispatch(setRestaurants(restaurants)),\n})\n\nApp.propTypes = {\n  card: PropTypes.object,\n  setRestaurants: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { rootReducer } from './reducers';\nimport App from './containers/App/App';\nimport './index.scss';\n\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\nconst store = createStore(rootReducer, devTools);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}